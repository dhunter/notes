- Web Design
	- Credits
		- The Complete 2020 Web Development Bootcamp, (https://www.udemy.com/course/the-complete-web-development-bootcamp/)
			- Course Resources List
				- https://www.appbrewery.co/p/web-development-course-resources/
	- CSS elements with multiple measurements on one line
		- The numbers start on the top and go clockwise around the item	
		- {border: 0px 10px 20px 30px;} would have a:
			- 0px border on top
				- (0 doesn't require a measurement type, but can still use)
			- 10px border on the right side
			- 20px border on the bottom
			- 30px border on the left side
		- Shorthand options
			- {border: 0px 10px 20px;}
				- 0px on top
				- 10px on left and right
				- 20px on bottom
			- {border: 0px 10px;}
				- 0px border on top and bottom
				- 10px border on left and right
			- {border: 0px;}
				- 0px border on all four sides
	- Displaying Elements
		- display: block --> nothing else on the same line, but can set width/height
		- display: inline --> anything can appear on same line, but can't set width/height
		- display: inline-block --> combination of prior two
			- Can appear on same line and also can set width/height
		- Hiding Elements
			- (for quizzes, etc)
			- display: none --> removes both the element and its position in the document
				- As if you just deleted the element entirely in the page source
			- visibility: hidden --> removes the element, but keeps its position
				- i.e. you'll see a hole where the element should have been displayed
	- Positioning
		- float: [left/right/etc]
			- Text that was below will now surround the targeted tag
		- position: static - (default) - positioned according to the normal flow of document
		- position: relative
			- Setting top, right, bottom or left properties will move the item relative to its normal, (position: static) position
		- position: fixed
			- Holds position relative to viewport
			- Does not move with scrolling
			- (Can use for menu bar, etc)
		- position: absolute
			- Setting top, right, bottom or left properties will move the item relative to its parent element's position, (including <body>, if no other parents)
			- Moves with scrolling.
		- position: sticky
			- position: relative until it's original position is reached in the document, then swaps to position: fixed
			- (A somewhat more elegant menu bar, etc, if {top: 0;})
		- z-index
			- Only works on items where all items in question have position <> static
				- (Items to go behind need position: absolute/fixed/sticky)
			- Determines 3D display order, (default: 0)
			- Lower values appear behind higher ones
				- If z-indexes are equal, items coming first in the html code will be displayed behind items that come after
					- i.e. if you have 3 divs with equal z-indexes, listed one after another in an html file:
						- Div 1 will be displayed at the back
						- Div 2 will be displayed in the middle
						- Div 3 will be displayed in the front
	- Fonts
		- Embedding
			- In header:
				- <link href="https://fonts.googleapis.com/css?=family[name of family1]|[name of family2]|[name of family3]" rel="stylesheet">
		- Sizing
			- 16px, (fixed size) = 100%, (scaling) = 1em, (scaling) = 1rem, (scaling)
				- To convert fixed font size to scaling, divide by 16 = Xem/Xrem
			- Note: scaling inherits from all parent elements
				- So, if <body> is 2em and <h1> is 3em, final size = 6em
				- Unless you use "rem," which ignores all parent settings
					- So, in above, if <h1> is 3rem, (instead of 3em), final size = 3em
	- Designer vs Non-Designer Thinking
		- https://www.udemy.com/course/the-complete-web-development-bootcamp/learn/lecture/12399734#content
		- Color Theory
			- Different shades have different "moods"
				- i.e. Elicit different reactions in people seeing them
					- Many of those reactions are common
				- Good exercise is to analyze (especially print) ads to see how they use color to evoke desired reactions
			- Red
				- Love, Energy, Intensity
				- Generates excitement
			- Yellow
				- Joy, Intellect, Attention
				- Too much yellow can generate attention fatigue
			- Green
				- Freshness, Safety, Growth
				- (Often used for food ads)
			- Blue
				- Stability, Trust, Serenity
				- (medical/medicine/health)
			- Purple
				- Royalty, Wealth, Femininity
			- Combining Colors to make Color Palettes
				- Analogous Colors, (2 colors)
					- Selecting adjacent colors on the color wheel
					- Harmonious, Easy to look at for long periods.
					- Good for primary interface
				- Complimentary Colors, (2 colors)
					- Selecting diametrically-opposed colors on the color wheel
					- Attention-grabbing, but hard to look at for long periods.
					- Bad choice for primary interface.
				- Split Colors, (3 colors)
					- Way of toning down disharmony of Complimentary
					- Instead of picking complimentary color, instead the pick two colors surrounding the complimentary color.
					- Still attention-grabbing, but not as clashy
				- Triadic Colors, (3 colors)
					- Selecting 3 colors equidistant around color wheel
				- Monochromatic, (2 colors)
					- Adding darker or lighter second color in the same family
		- Typography
			- 2 different fonts are good, 3 is pushing it, 4+ is bad
			- Keep moods and time eras consistent
				- i.e. Don't mix Roaring 20's-ish font with Renaissance-ish font
			- Contrast serif-ness, (serif vs sans-serif) and font weights
		- UI Design
			- Function comes before form in all cases
			- Ingrained visual impulses
				- Eyes automatically go to biggest, boldest, brightest thing first
				- Then round things
				- Then smaller things
				- Then lighter-shaded things
			- Think of application as a journey
				- Title > Sub-title > Larger images > Smaller images > Some text
			- Minimize number of alignment lines, (horizontal & vertical)
				- More alignment lines are perceived as "messy"
			- Should work to provide conscious and subconscious queues
				- Use 3D lighting effects to make elements seem more like real world
					- Light should always come from above			
					- i.e. To improve clickthrough on clickable button
						- Unpressed state - slight shadow on bottom
						- Pressed state - no shadow
			- Start in monochrome
				- Focus on spacing / positioning, etc
				- To avoid getting distracted by colors
				- Then add a single pop of color
					- And build up color from there
			- Make sure text over images stands out / is easily readable
				- Especially where image will change
					- If image will always be static, can just mod text color
					- Make sure and test in front of a whole slew of images
				- Colored overlay above image
					- Can look a bit ugly
						- Reducing opacity can help
							- Gaussian blur has similar effect
	- Responsive Design
		- Page design changes based on viewport / screen size used, (i.e. laptop vs ipad vs phone)
			- Bootstrap, (https://getbootstrap.com/)
				- There are other front-end frameworks that perform similar tasks
					- (Bootstrap provides additional CSS functionality beyond just responsive design)
				- Navbar, (requires Javascript)
					- Navbar expands / contracts into hamburger menu
				- Grid System
					- Horizontal content broken into 12ths
						- i.e. to display 4 items per line for laptops, 3 per line for ipads and 2 per line for phones
							- Define outer div set to class="row"
								- Actual content class="[below code]"
									- col-xl-3 - 4 items per line, (12/3) for full screen desktops, (xl)
									- col-lg-4 - 3 items per line, (12/4) for full screen laptops, (lg) presuming resolution is less than desktops
									- col-md-6 - 2 items per line, (12/6) for ipads / windowed content, (md) on desktops/laptops
									- col-sm-12 - 1 item per line, (12/12) for phones, (sm)
									- Note: content class has to include space-separated codes for all scenarios desired
										- i.e. to be fully responsive, class="col-xl-3 col-lg-4 col-md-6 col-sm12"
											- If fewer scenarios specified, will only change display where specified
												- i.e. if only use "col-md-6" by itself, every viewport from medium up in size, (md, lg, xl) will show 2 per line, and below medium, (sm) will show 1 per line.
			- Media Queries
				- Choose different css selectors based on:
					- Media types, (print, screen, speech) and/or
					- Media features, (height, width, orientation, resolution)
				- Very useful for fine-tuning individual bits of design
					- i.e. use Bootstrap for broad-brush design bits
						- Then add in media queries, where desired, to finish off
				- Encase css selectors within query specifying situation they should apply to
					- i.e. @media screen (min-width: 900px) { [css selectors] }
				- If you model css selector classes identically - i.e.:
					- @media screen (min-width: 600px) {
  					  /* For tablets: */
					  .col-s-1 {width: 8.33%;}
					  .col-s-2 {width: 16.66%;}
					  .col-s-3 {width: 25%;}
					  ...
					  .col-s-12 {width: 100%;}
					  }
					 
					  @media screen (min-width: 768px) {
					  /* For desktop: */
					  .col-1 {width: 8.33%;}
					  .col-2 {width: 16.66%;}
					  .col-3 {width: 25%;}
					  ...
					  .col-12 {width: 100%;}
					  }
					
					- You can then call them exactly as with Bootstrap in html - i.e.:
						- <div class="row">
							<div class="col-3 col-s-3">...</div>
							<div class="col-6 col-s-9">...</div>
							<div class="col-3 col-s-12">...</div>
						- </div>
				- Note: css selectors inside media queries override css selectors outside - i.e.:
					- h1 {color: red;}
					- @media screen (min-width: 900) {h1 {color: blue;}}
					- If width < 900, h1's will be red.
					- If width >= 900, h1's will be blue.
	- Accessibility
		- aria-hidden="true"
			- Hides content from assistive technology, (i.e. screen reader) for this and all children elements
				- (for use with buttons, etc)
	- Javascript, (JS)
		- Good source for idiomatic js code -> https://github.com/rwaldron/idiomatic.js/
		- Document Object Model, (DOM)
			- Tree diagram of html code
			- Selecting items, (most common method)
				- document.querySelector("[element]") -> Individual Item
					- If multiples, will only return first one found
				- document.querySelectorAll("[element]") -> Array of all matching
				- [element] uses exact same selectors as CSS
					- i.e. "h1", "p.[class name]", "li a"
			- Modifying items
				- (Uses same properties as CSS, but camelCased instead of hyphenated)
					- (i.e. instead of "font-size," (CSS) it would be "fontSize," (JS))
				- For styles, best is to use ".classList.toggle[[class name]];"
					- (or ".classList.add[[class name]];"/".classList.remove[[class name]];")
					- Toggles adding/removing class selectors that exist in CSS file to items
						- (akin to how Bootstrap works)
							- i.e. add/remove a class of "invisible" or "big" or whatever
					- Lets you keep all styling in CSS file and only use JS for behavior.
				- For actual attributes, (i.e. "href=" in an anchor tag):
					- .getAttribute([attribute name])
					- .setAttribute([attribute name], [new value])
		- Event Listeners
			- When using a named function as the callback function of an event listener
				- (i.e. the function that's supposed to be called once the specified event is detected)
				- Use the function name without parenthesis, or the event will trigger on page load, rather than only when the specified event occurs, i.e.:
					- ".addEventListener('click', handle_click());" -> Triggers on page load, rather than on click, as intended.
					- ".addEventListener('click', handle_click);" -> Triggers on click, as intended.
				- Thus, if you want to actually send back the event object that triggered the callback, you have to use an anonymous, (i.e. not named) function.
					- i.e. ".addEventListener("keydown", function(event) {}"
						- Since you can't do ".addEventListener("keydown", handle_click(event));"
							- And still have it respond only to the event and not page load.
		- Constructor Functions
			- First letter of the function name has to be capitalized, i.e.
				- function Person ([name], [age], [height],...) {
				 	this.name = name;
				 	this.age = age;
				 	this.height = height;
				 	...
				  }
			- When using, have to use "new" keyword before any values passed, i.e.
				- person_1 = new Person ([name_1], [age_1], [height_1],...);
				- person_2 = new Person ([name_2], [age_2], [height_2],...);
			- To add methods, use anonymous functions, (i.e. functions without names)
				- i.e. in above Person definition, add:
					- this.[method_name] = function() {[function definition]}
				- To use for person_1, would just be "person_1.[method_name]()"
		- jQuery
			- (Loaded via hosted library, akin to Bootstrap)
				- (i.e. <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>)
			- Simplification of pure javascript
				- "$" at the beginning of a statement signifies you're using jQuery
					- Can also embed jQuery inside javascript on the same line
						- i.e. "console.log($([element]).hasClass([class name]));"
			- Selecting items
				- "$("[element]")
					- Instead of document.querySelector("[element]")
				- No difference between selecting one, (.querySelector) or many, (.querySelectorAll) items
			- Modifying items
				- i.e. ".toggleClass('[class name]');"
					- Instead of ".classList.toggle[[class name]];"
				- Any modifications will apply to every matching item, (whether singular or in an array)
			- Adding/Removing html elements, (without altering actual html files)
				- Adding
					- Around the [element]:
						- Add [html code] immediately BEFORE [element]'s OPENING tag.
							- "$("[element]").before("[html code]");"
						- Add [html code] immediately AFTER [element]'s CLOSING tag.						
							- "$("[element]").after("[html code]");"
					- Inside of the [element]:
						- Add [html code] immediately AFTER [element]'s OPENING tag.
							- "$("[element]").prepend("[html code]");"
						- Add [html code] immediately BEFORE [element]'s CLOSING tag.							
							- "$("[element]").append("[html code]");"
					- i.e. BEFORE <h1> PREPEND [prior h1 content] APPEND </h1> AFTER
				- Removing - "$("[element]").remove();"
		- Node / Node.js
			- Allows Javascript to run outside of the browser
			- For each new project
				- Initialize -> "npm init"
					- (inside project directory)
					- Text-based setup wizard
						- Will create [package.json] file with results
							- For "dependencies" item:
								- Semantic Versioning
									- [Major Release Version].[Minor Release Version].[Patch Version]
										- i.e. 3.2.5
									- Bug fixes that don't break any functionality increment [Patch Version]
										- i.e. 3.2.6
									- Feature additions that don't break functionality increment [Minor Release Version]
										- i.e. 3.3.0
									- Functionality-breaking additions/subtractions increment [Major Release Version]
										- i.e. 4.0.0
								- When specifying dependency versions, three options:
									- Precise version only -> "3.2.5"
									- Precise version + [Patch Version] -> "~3.2.5"
									- Precise version + [Minor Release Version] -> "^3.2.5"
				- Startup -> "node [package.json "main" js file]"
					- If code inside [package.json "main" js file] would start a webserver:
						- Requires manually stopping and restarting the server for each saved change in [package.json "main" js file]
						- Nodemon
							- Drop-in webserver replacement for basic "node [package.json "main" js file]"
								- "nodemon [package.json "main" js file]"
									- (To install -> "npm install -g nodemon")
							- Automatically stops and restarts server with every saved change in [package.json "main" js file]
			- Express
				- Node framework analogous to jQuery for Javascript
				- Issues @ 2020-05-22
					- Express uses symlinks when installing, which will not work on FAT32/NTFS volumes
						- (FAT32/NTFS volumes don't allow creation of Linux symlinks)
					- npm has a --no-bin-links flag which should deal with this, but the flag doesn't work
						- (Hasn't worked since at least 2014...  :/ )
					- Workaround
						- Create [twin project directory] on a drive that does create proper symlinks, (i.e. ext4, zfs)
						- Install Express, (and every other non-global module you need for that project) in [twin project directory]. 
						- Delete any prior /node_modules/ directory in [FAT32 project directory]
						- Use rsync to create a copy in [FAT32 project directory], converting symlinks to normal files/directories.
							- "rsync -avL ./node_modules [FAT32 project directory]"
						- cp [twin project directory]/package.json and [twin project directory]/package-lock.json to [FAT32 project directory]
				- Enabling, (add below inside [package.json "main" js file]):
					- const express = require("express");
					  const app = express();
					- Enable static file, (i.e. css, images, etc) access from the outside world
						- In [project directory]
							- "mkdir public"
							- Move all css, image and other static files into [project directory]/public
						- In [package.json "main" js file]
							- "app.use(express.static(__dirname + '/public'));"
					- app.listen([port number]) sets port server will respond on
					- Add routes, (/url permutations) that you want to respond to
						- (if files) app.[HTTP method]([route], function(request, response) {
							response.sendFile(__dirname + "/[relative path to file to send]");
						}) OR (if text) app.[HTTP method]([route], function(request, response) {
							response.send("[random text]");
							- (__dirname is a special Node variable equal to the absolute directory of the current working directory)
							- Where [HTTP method] = "post", "get", "put" or "delete"
								- (corresponding to "create", "read", "update" and "delete" operations)
								- i.e. (if files) app.get("/", function(request, response) {
									response.sendFile(__dirname + "/index.html");
								  }) OR (if text) app.get("/", function(request, response) {
									response.send("Hello World");
							- [route] examples:
								- "/" - home route
									- i.e. responds to the base url of your website
								- "/contact" -> [base url]/contact
								- "/about" -> [base url]/about
					- (Note: Can only have one response.send/.sendFile per route)
				- Client/server interation
					- Client, (displaying html file you sent -> [__dirname + "/[html file]"]), i.e:
						- <form action="/" method="post">
        					  	<input type="text" name="num1" placeholder="First Number">
        					  	<input type="text" name="num2" placeholder="Second Number">
        					  	<button type="submit" name="submit">Calculate</button>
    					  	  </form>
					- Server
						- Body Parser, (npm install body-parser)
							- In [package.json "main" js file]
								- "const body_parser = require("body-parser");"
								- Tell Express to use it
									- app.use(body_parser.urlencoded({extended: true}));
										- (several .[X] parser types)
								- Do whatever you want with the received data inside the app.post route, i.e:
								- app.post("/", function(req, res) {
									var num1 = Number(req.body.num1);
									var num2 = Number(req.body.num2);

									var result = num1 * num2;
									res.send("The result of the calculation is " + result);
								})
									- (Note: body-parser returns parsed items as strings by default)
						- Remote Elements, (via API)
							- (Using Node's https module)
							- https.get([url], function(response) {
								response.on([information desired from API response, often "data"], function(data) {
									JSON.parse(data);
								})
							})
								- (Note: "data" in above function arrives in hexadecimal format, hence use of [X].parse, where "data" is in [X, often "JSON"] format)
			- (Github)
				- Hiding API keys, (and other sensitive info)
					- Add ".env" file to [project directory]
					- Add ".env" line to .gitignore
						- (will keep any .env files from being committed)
					- Store any secret info in ".env"
						- In the form of one CAPITALIZED_KEYNAME='value' per line
					- npm install dotenv
					- In [package.json "main" js file]
						- "const dotenv = require('dotenv').config();"
						- Values of all .env key/value pairs available as "process.env.[CAPITALIZED_KEYNAME]"
				- Add 'node_modules' to .gitignore to avoid committing files generated by npm init.
	- Deployment
		- Heroku
			- Prep for deployment
				- In [project directory]
					- Add file named "Procfile" to [project directory] that contains command to start app
						- i.e. "web: node index.js"
					- Mod app.listen to use process.env.PORT environment variable
						- (either adding "PORT=[desired local port number] to .env), or
						- ("app.listen((process.env.PORT || 3000),...))
							- (where [desired local port number] = 3000)
					- Add node version to package.json
						- "engines": {
							"node": "14.x" // (or whatever version of Node you're using)
						  }
				- Heroku Dashboard > "Settings" tab
					- Manually enter any needed environment variables, (from .env file) as "Config Vars"
			- Deploy
				- Through Github
					- Heroku Dashboard > "Deploy" tab
						- (Authorize Heroku to access your Github account)
						- Add repo name to "Connect to Github" section
						- Enable automatic deploys
							- Every commit to master will automatically push to Heroku
						- Or leave unchecked and manually deploy via "Deploy a Github branch"
							- Can also be used to deploy branches other than master.
				- Through command line
					- install heroku, (see heroku.com for details)
					- In [project directory]
						- "heroku create" to add heroku git remote
						- "git push heroku master"